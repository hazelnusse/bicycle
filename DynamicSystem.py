from numpy import zeros, sin, pi
from numpy import linspace, array
from scipy.integrate import odeint


class DynamicSystem:
    """Dynamic System class.

    """

    def __init__(self,name):

        # model name
        self.name = name

        # parameter names and their values
        self.parameters = {'g':9.81,
                           'l':1.,
                           'm':1.}
        # state names and their initial conditions
        self.states = ['theta',
                       'omega']
        # sets the initial conditions of the states
        self.x = array([0.,
                        0.])
        # sets the time to the initial time
        self.t = 0.
        # initializes the zees
        self.z = zeros(1)
        # numerical integration parameters
        self.numint = {'ti':0.,
                       'tf':10.}

    def f(self):
        '''Returns the derivative of the states'''

        # defines the parameters from the attribute
        for parameter, value in self.parameters.items():
            exec(parameter + ' = ' + str(value))

        # sets the current state
        theta = self.x[0]
        omega = self.x[1]

        # sets the zees
        self.z[0] = sin(theta)

        # calculates inputs
        torque = self.inputs()

        # calculates the derivatives of the states
        thetap = omega
        omegap = -g/l*self.z[0] + torque/(m*l*l)

        # plug in the derivatives for returning
        f = zeros(2)
        f[0] = thetap
        f[1] = omegap

        return f

    def define(self):
        def newfunc():
            print 'dookie'

    def inputs(self):
        torque = 10*sin(2*pi*self.t + pi/6)
        return torque

    def simulate(self, f, numint):
        t = linspace(numint['ti'], numint['tf'], 100)
        # Using a nested list so that we pass parameters via odeint, and allow those
        # parameters to be modified within our ODE function.  This would be used to
        # modify the z values generated by Autolev, and 
        params = [g, l, m, z]

        x = zeros((len(t), 2))
        x[0] = array([0.1, 0.2])
        #print x

        for i in range(len(t)-1):
            t_int = [t[i], t[i+1]]

            test = odeint(pendulum_f, x[i], t_int, args=(params,))
            # causes z element of params to be modified using the latest state estimate
            pendulum_f(test[1,:], t[i+1], params)
            x[i+1] = test[1,:]
            # this guy is being calculated inside of pendulum_f
            print "params =", params[3]
            # this guy is being calculated right now:w
            print "sin(x[i + 1][0] =", sin(x[i + 1, 0])

# define the function
#exec("def pendulum_f(x, t):
    #print 'dookie'
